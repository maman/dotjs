#!/usr/bin/ruby

if (%w( -h --help -help help ) & ARGV).length > 0
  puts "usage: djsd [-hv]"
  puts "starts dotjs server in the foreground. kill with ^C"
  exit
end

if ARGV.include?('-v')
  puts "djsd 2.0"
  exit
end

require 'json'
require 'openssl'
require 'webrick'
require 'webrick/https'

dotjs = Class.new(WEBrick::HTTPServlet::AbstractServlet) do
  def do_GET(request, response)
    body = build_body(request.path)

    response.status = body.empty? ? 204 : 200
    if origin = detect_origin(request)
      response['Access-Control-Allow-Origin'] = origin
    end
    response['Content-Type'] = 'text/javascript'
    response.body = body
  end

  def build_body(path)
    files = ["default"]
    paths = path.sub(/\.js\Z/, '').gsub('/','').split('.')

    until paths.empty?
      file = File.expand_path(paths.join('.'))
      files.unshift file
      paths.shift
    end

    body = "// dotjs is working! //\n"

    files.each do |file|
      body << (js(file) || coffee(file) || "// #{file}.(js|coffee): not found\n")
    end

    body
  end

  def js file
    if File.file? "#{file}.js"
      "// #{file}.js:\n" << File.read("#{file}.js") << "\n"
    end
  end

  def coffee file
    if File.exist? "#{file}.coffee"
      output = `/usr/local/bin/coffee -bp #{file}.coffee`
      case $?.exitstatus
        when 0
          "// #{file}.coffee:\n#{output}\n"
        when 127
          "console.error('dotjs â€” `coffee\\' executable not found, path: %s', #{ENV["PATH"].to_json}');\n"
        else
          "console.error('dotjs - `coffee\\' error:', #{output.to_json});\n"
      end
    end
  end

  def detect_origin(req)
    path   = req.path
    origin = req.header['origin']
    search = path.gsub('/','').gsub(/\.js$/,'') + '$'

    if origin.length == 1 && path.length != 1 && origin[0].match(search)
      origin[0]
    end
  end
end

ssl_key = ssl_cert = nil

home_path = ENV.fetch("HOME")
config_path = File.join(home_path, ".config", "dotjs")
ssl_key_path = File.join(config_path, "server.key")
ssl_cert_path = File.join(config_path, "server.crt")

if File.exist? ssl_key_path and File.exist? ssl_cert_path
  ssl_key = OpenSSL::PKey.read(IO.read(ssl_key_path))
  ssl_cert = OpenSSL::X509::Certificate.new(IO.read(ssl_cert_path))
end

unless ssl_key and ssl_cert
  ssl_key = OpenSSL::PKey::RSA.generate(2048)

  ssl_cert = OpenSSL::X509::Certificate.new
  ssl_cert.version = 2
  ssl_cert.serial = 1
  ssl_cert.subject = ssl_cert.issuer = OpenSSL::X509::Name.new([["CN", "localhost"]])
  ssl_cert.public_key = ssl_key.public_key
  ssl_cert.not_before = Time.now
  ssl_cert.not_after = Time.now + (360 * 24 * 3600)
  ssl_cert.sign ssl_key, OpenSSL::Digest::SHA256.new

  system "mkdir", "-p", config_path
  IO.write(ssl_key_path, ssl_key.to_pem, :perm => 0600)
  IO.write(ssl_cert_path, ssl_cert.to_pem)
end

server_options = {
  :BindAddress => "127.0.0.1",
  :Port => 3131,
  :AccessLog => [],
  :SSLEnable => true,
  :SSLPrivateKey => ssl_key,
  :SSLCertificate => ssl_cert,
}

server = WEBrick::HTTPServer.new(server_options)
server.mount('/', dotjs)

%w( INT TERM ).each do |sig|
  trap(sig) { server.shutdown }
end

server.start
